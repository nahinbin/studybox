"""Add EmailLog table for tracking sent emails

Revision ID: 3d2f2aa24ec6
Revises: ab29fec1042b
Create Date: 2025-09-27 21:50:19.250695

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '3d2f2aa24ec6'
down_revision = 'ab29fec1042b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('email_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('recipient_email', sa.String(length=150), nullable=False),
    sa.Column('recipient_name', sa.String(length=150), nullable=True),
    sa.Column('subject', sa.String(length=200), nullable=False),
    sa.Column('email_type', sa.String(length=50), nullable=False),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('previous_semester_transcript')
    op.drop_table('contact_reply')
    op.drop_table('mmu_link')
    op.drop_table('admin_message')
    with op.batch_alter_table('community_comment', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('community_comment_post_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('community_comment_user_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(None, 'community_post', ['post_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('community_post', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('community_post_user_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('community_post_like', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('community_post_like_post_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('community_post_like_user_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'community_post', ['post_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('time_studied', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('time_studied_user_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'user', ['user_id'], ['id'], ondelete='CASCADE')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('time_studied', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('time_studied_user_id_fkey'), 'user', ['user_id'], ['id'])

    with op.batch_alter_table('community_post_like', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('community_post_like_user_id_fkey'), 'user', ['user_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('community_post_like_post_id_fkey'), 'community_post', ['post_id'], ['id'])

    with op.batch_alter_table('community_post', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('community_post_user_id_fkey'), 'user', ['user_id'], ['id'])

    with op.batch_alter_table('community_comment', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('community_comment_user_id_fkey'), 'user', ['user_id'], ['id'])
        batch_op.create_foreign_key(batch_op.f('community_comment_post_id_fkey'), 'community_post', ['post_id'], ['id'])

    op.create_table('admin_message',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('recipient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['user.id'], name=op.f('admin_message_admin_id_fkey')),
    sa.ForeignKeyConstraint(['recipient_id'], ['user.id'], name=op.f('admin_message_recipient_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('admin_message_pkey'))
    )
    op.create_table('mmu_link',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('favicon_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('mmu_link_pkey'))
    )
    op.create_table('contact_reply',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('contact_message_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reply_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['user.id'], name=op.f('contact_reply_admin_id_fkey')),
    sa.ForeignKeyConstraint(['contact_message_id'], ['contact_message.id'], name=op.f('contact_reply_contact_message_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('contact_reply_pkey'))
    )
    op.create_table('previous_semester_transcript',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('semester_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('course_code', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('grade', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('credit_hours', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('gpa_points', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('previous_semester_transcript_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('previous_semester_transcript_pkey'))
    )
    op.drop_table('email_log')
    # ### end Alembic commands ###
